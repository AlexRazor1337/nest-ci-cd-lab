<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product and Material Management</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/alvaromontoro/almond.css@latest/dist/almond.min.css" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.3.4/axios.min.js"></script>
    <style>
        .container { display: flex; flex-wrap: wrap; justify-content: space-between; display: none; }
        .section { width: 45%; margin-bottom: 20px; }
        table { width: 100%; border-collapse: collapse; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        .pagination { margin-top: 10px; }
        .pagination button { margin-right: 5px; }
        #loader {
    width: 48px;
    height: 48px;
    border: 5px solid #FFF;
    border-bottom-color: #FF3D00;
    border-radius: 50%;
    display: inline-block;
    box-sizing: border-box;
    animation: rotation 1s linear infinite;
    }

    @keyframes rotation {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
    } 
    </style>
</head>
<body>
    <div id="spinner" style="position: fixed; top: 50%; left: 50%;" >
        <div id="loader"></div>
    </div>
<div class="container" id="container">
        <!-- Product Section -->
        <div class="section">
            <h1>Create Product</h1>
            <div>
                <label for="productCode">Product Code:</label>
                <input type="text" id="productCode" required>
            </div>
            <div>
                <label for="name">Name:</label>
                <input type="text" id="name" required>
            </div>
            <div>
                <label for="type">Type:</label>
                <select id="type" required>
                    <option value="earrings">Earrings</option>
                    <option value="rings">Rings</option>
                    <option value="brooches">Brooches</option>
                    <option value="bracelets">Bracelets</option>
                </select>
            </div>
            <div>
                <label for="totalWeight">Total Weight:</label>
                <input type="number" id="totalWeight" min="0" step="0.01" required>
            </div>
            <div>
                <label for="price">Price:</label>
                <input type="number" id="price" min="0" step="0.01" required>
            </div>
            <h2>Product Materials</h2>
            <div id="productMaterials">
                <!-- Product materials will be added here dynamically -->
            </div>
            <button onclick="addMaterial()">Add Material</button>
            <br><br>
            <button onclick="submitProduct()">Create Product</button>
        </div>

        <!-- Material Section -->
        <div class="section">
            <h1>Create Material</h1>
            <div>
                <label for="materialCode">Material Code:</label>
                <input type="text" id="materialCode" required>
            </div>
            <div>
                <label for="materialName">Name:</label>
                <input type="text" id="materialName" required>
            </div>
            <div>
                <label for="pricePerGram">Price Per Gram:</label>
                <input type="number" id="pricePerGram" min="0" step="0.01" required>
            </div>
            <br>
            <button onclick="submitMaterial()">Create Material</button>
        </div>

        <!-- Sales Section -->
        <div class="section">
            <h1>Create Sale</h1>
            <div>
                <label for="productSelect">Product:</label>
                <select id="productSelect" required>
                    <!-- Products will be populated dynamically -->
                </select>
            </div>
            <div>
                <label for="saleDate">Date:</label>
                <input type="date" id="saleDate" required>
            </div>
            <div>
                <label for="lastName">Last Name:</label>
                <input type="text" id="lastName" required>
            </div>
            <div>
                <label for="firstName">First Name:</label>
                <input type="text" id="firstName" required>
            </div>
            <div>
                <label for="middleName">Middle Name:</label>
                <input type="text" id="middleName" required>
            </div>
            <br>
            <button onclick="submitSale()">Create Sale</button>
        </div>

        <!-- Materials List -->
        <div class="section">
            <h2>Materials List</h2>
            <table id="materialsTable">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Price Per Gram</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="materialsBody"></tbody>
            </table>
            <div id="materialsPagination" class="pagination"></div>
        </div>

        <!-- Products List -->
        <div class="section">
            <h2>Products List</h2>
            <table id="productsTable">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Total Weight</th>
                        <th>Price</th>
                        <th>Materials</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="productsBody"></tbody>
            </table>
            <div id="productsPagination" class="pagination"></div>
        </div>

        <!-- Sales List -->
        <div class="section">
            <h2>Sales List</h2>
            <table id="salesTable">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Product</th>
                        <th>Customer Name</th>
                        <th>Price</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="salesBody"></tbody>
            </table>
            <div id="salesPagination" class="pagination"></div>
        </div>

        {{!-- Most expensive product --}}
        <div class="section">
            <h2>Most Expensive Product</h2>
            <button onclick="showMostExpensiveProduct()">Show Most Expensive Product</button>
            <div id="mostExpensiveProduct">
            </div>
        </div>

        {{!-- Most profitable product --}}
        <div class="section">
            <h2>Most Profitable Product</h2>
            <button onclick="showMostProfitableProduct()">Show Most Profitable Product</button>
            <div id="mostProfitableProduct">
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const ITEMS_PER_PAGE = 5;

        // State
        let materials = [];
        let products = [];
        let sales = [];

        let currentMaterialPage = 1;
        let currentProductPage = 1;
        let currentSalePage = 1;

        const productMaterialsContainer = document.getElementById('productMaterials');

        async function fetchMaterials() {
            return axios.get('/api/materials')
                .then(response => {
                    materials = response.data;
                    updateMaterialDropdowns();
                    renderMaterialsList();
                })
                .catch(error => {
                    console.error('Error fetching materials:', error);
                    alert('Error fetching materials. Please check the console for details.');
                });
        }

        async function fetchProducts() {
            return axios.get('/api/products')
                .then(response => {
                    products = response.data;
                    renderProductsList();
                    populateProductSelect();
                })
                .catch(error => {
                    console.error('Error fetching products:', error);
                    alert('Error fetching products. Please check the console for details.');
                });
        }

        function populateProductSelect() {
            const productSelect = document.getElementById('productSelect');
            products.forEach(p => {
                const option = document.createElement('option');
                option.value = p.id;
                option.textContent = `${p.productCode} - ${p.name}`;
                productSelect.appendChild(option);
            });
        }

        async function fetchSales() {
            return axios.get('/api/sales')
                .then(response => {
                    sales = response.data;
                    renderSalesList();
                })
                .catch(error => {
                    console.error('Error fetching sales:', error);
                    alert('Error fetching sales. Please check the console for details.');
                });
        }

        function getMaterialOptionsHTML() {
            return materials.map(m => `<option value="${m.id}">${m.name}</option>`).join('');
        }

        function addMaterial() {
            const materialDiv = document.createElement('div');
            materialDiv.innerHTML = `
                <select class="materialId" required>
                    ${getMaterialOptionsHTML()}
                </select>
                <input type="number" class="weightUsed" min="0" step="0.01" placeholder="Weight Used" required>
                <button onclick="this.parentElement.remove()">Remove</button>
            `;
            productMaterialsContainer.appendChild(materialDiv);
        }


    // TODO: Create validation for materials weights
    // TODO: Create validation for product materials price
        function submitProduct() {
            const productData = {
                productCode: document.getElementById('productCode').value,
                name: document.getElementById('name').value,
                type: document.getElementById('type').value,
                totalWeight: parseFloat(document.getElementById('totalWeight').value),
                price: parseFloat(document.getElementById('price').value),
                productMaterials: Array.from(productMaterialsContainer.children).map(div => ({
                    materialId: parseInt(div.querySelector('.materialId').value),
                    weightUsed: parseFloat(div.querySelector('.weightUsed').value)
                }))
            };

            if (productData.productMaterials.some(m => m.weightUsed <= 0)) {
                alert('All materials must have a weight greater than zero.');
                return;
            }

            if (productData.productMaterials.length === 0) {
                alert('Product must have at least one material.');
                return;
            }

            const totalWeight = productData.productMaterials.reduce((total, m) => total + m.weightUsed, 0);
            if (totalWeight !== productData.totalWeight) {
                alert('Total weight of materials does not match the total weight of the product.');
                return;
            }

            axios.post('/api/products', productData)
                .then(response => {
                    alert('Product created successfully!');
                    fetchProducts();
                    // Reset the form
                    // ... (reset product form fields)
                })
                .catch(error => {
                    console.error('Error creating product:', error);
                    alert('Error creating product. Please check the console for details.');
                });
        }

        

        function submitSale() {
            const saleData = {
                productId: parseInt(document.getElementById('productSelect').value),
                date: document.getElementById('saleDate').value,
                lastName: document.getElementById('lastName').value,
                firstName: document.getElementById('firstName').value,
                middleName: document.getElementById('middleName').value
            };

            axios.post('/api/sales', saleData)
                .then(response => {
                    alert('Sale created successfully!');
                    fetchSales();
                    // Reset the form
                    // ... (reset sale form fields)
                })
                .catch(error => {
                    console.error('Error creating sale:', error);
                    alert('Error creating sale. Please check the console for details.');
                });
        }

        function submitMaterial() {
            const materialData = {
                materialCode: document.getElementById('materialCode').value,
                name: document.getElementById('materialName').value,
                pricePerGram: parseFloat(document.getElementById('pricePerGram').value)
            };

            axios.post('/api/materials', materialData)
                .then(response => {
                    alert('Material created successfully!');
                    fetchMaterials();
                    // Reset the form
                    document.getElementById('materialCode').value = '';
                    document.getElementById('materialName').value = '';
                    document.getElementById('pricePerGram').value = '';
                })
                .catch(error => {
                    console.error('Error creating material:', error);
                    alert('Error creating material. Please check the console for details.');
                });
        }

        function updateMaterialDropdowns() {
            const materialSelects = document.querySelectorAll('.materialId');
            const optionsHTML = getMaterialOptionsHTML();
            materialSelects.forEach(select => {
                select.innerHTML = optionsHTML;
            });
        }

        function renderMaterialsList() {
            const tbody = document.getElementById('materialsBody');
            const startIndex = (currentMaterialPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const materialsToShow = materials.slice(startIndex, endIndex);

            tbody.innerHTML = materialsToShow.map(m => `
                <tr>
                    <td>${m.materialCode}</td>
                    <td>${m.name}</td>
                    <td>${m.pricePerGram}</td>
                    <td>
                        <button onclick="deleteMaterial(${m.id})">Delete</button>
                    </td>
                </tr>
            `).join('');

            renderPagination('materialsPagination', materials.length, currentMaterialPage, page => {
                currentMaterialPage = page;
                renderMaterialsList();
            });
        }

        function renderSalesList() {
            const tbody = document.getElementById('salesBody');
            const startIndex = (currentSalePage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const salesToShow = sales.slice(startIndex, endIndex);

            tbody.innerHTML = salesToShow.map(s => `
                <tr>
                    <td>${s.date}</td>
                    <td>${s.firstName + ' ' + s.middleName + ' ' + s.lastName}</td>
                    <td>${s.product.name}</td>
                    <td>${s.product.price}</td>
                    <td>
                        <button onclick="deleteSale(${s.id})">Delete</button>
                    </td>
                </tr>
            `).join('');

            renderPagination('salesPagination', sales.length, currentSalePage, page => {
                currentSalePage = page;
                renderSalesList();
            });
        }
        
        function deleteMaterial(materialId) {
            axios.delete(`/api/materials/${materialId}`)
                .then(() => {
                    alert('Material deleted successfully!');
                    fetchMaterials();
                })
                .catch(error => {
                    console.error('Error deleting material:', error);
                    alert('Error deleting material. Please check the console for details.');
                });
        }

        function deleteProduct(productId) {
            axios.delete(`/api/products/${productId}`)
                .then(() => {
                    alert('Product deleted successfully!');
                    fetchProducts();
                })
                .catch(error => {
                    console.error('Error deleting product:', error);
                    alert('Error deleting product. Please check the console for details.');
                });
        }

        function deleteSale(saleId) {
            axios.delete(`/api/sales/${saleId}`)
                .then(() => {
                    alert('Sale deleted successfully!');
                    fetchSales();
                })
                .catch(error => {
                    console.error('Error deleting sale:', error);
                    alert('Error deleting sale. Please check the console for details.');
                });
        }

        function renderProductsList() {
            const tbody = document.getElementById('productsBody');
            const startIndex = (currentProductPage - 1) * ITEMS_PER_PAGE;
            const endIndex = startIndex + ITEMS_PER_PAGE;
            const productsToShow = products.slice(startIndex, endIndex);

            tbody.innerHTML = productsToShow.map(p => `
                <tr>
                    <td>${p.productCode}</td>
                    <td>${p.name}</td>
                    <td>${p.type}</td>
                    <td>${p.totalWeight}g</td>
                    <td>${p.price}</td>
                    <td>${p.productMaterials.map(m => m.material.name + '(' + m.weightUsed + 'g)' ).join(', ')}</td>
                    <td>
                        <button onclick="deleteProduct(${p.id})">Delete</button>
                    </td>
                </tr>
            `).join('');

            renderPagination('productsPagination', products.length, currentProductPage, page => {
                currentProductPage = page;
                renderProductsList();
            });
        }

        function renderPagination(elementId, totalItems, currentPage, onPageChange) {
            const totalPages = Math.ceil(totalItems / ITEMS_PER_PAGE);
            const paginationElement = document.getElementById(elementId);
            
            let paginationHTML = '';
            for (let i = 1; i <= totalPages; i++) {
                paginationHTML += `<button ${i === currentPage ? 'disabled' : ''} onclick="onPageChange(${i})">${i}</button>`;
            }
            
            paginationElement.innerHTML = paginationHTML;
            paginationElement.querySelectorAll('button').forEach(button => {
                button.addEventListener('click', () => onPageChange(parseInt(button.textContent)));
            });
        }

        function showMostExpensiveProduct() {
            axios.get('/api/products/most-expensive')
                .then(response => {
                    const mostExpensiveProduct = response.data;
                    document.getElementById('mostExpensiveProduct').innerHTML = `<p>The most expensive product is: ${mostExpensiveProduct.name} (${mostExpensiveProduct.code}) costing ${mostExpensiveProduct.price}</p>`;
                })
                .catch(error => {
                    console.error('Error fetching most expensive product:', error);
                    alert('Error fetching most expensive product. Please check the console for details.');
                });
        }

        function showMostProfitableProduct() {
            axios.get('/api/products/most-profitable')
                .then(response => {
                    const mostProfitableProduct = response.data;
                    document.getElementById('mostProfitableProduct').innerHTML = `<p>The most profitable product is: ${mostProfitableProduct.name} (${mostProfitableProduct.code}) for ${mostProfitableProduct.price}, making ${mostProfitableProduct.profit} of profit</p>`;
                })
                .catch(error => {
                    console.error('Error fetching most profitable product:', error);
                    alert('Error fetching most profitable product. Please check the console for details.');
                });
        }

        // Initial fetch of materials and products
        Promise.all([fetchMaterials(), fetchProducts(), fetchSales()])
            .then(() => {
                document.getElementById('spinner').style.display = 'none';
                document.getElementById('container').style.display = 'flex';
            })
            .catch(error => {
                console.error('Error fetching materials and products:', error);
                alert('Error fetching materials and products. Please check the console for details.');
            });
    </script>
</body>
</html>
